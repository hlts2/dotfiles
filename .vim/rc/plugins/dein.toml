[[plugins]]
repo = 'Shougo/dein.vim'
rtp = ''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
    let g:go_highlight_operators = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_format_strings = 1
    let g:go_fmt_experimental = 1
    let g:go_fmt_command = "goimports"
    let g:go_test_timeout= '15s'
    let g:go_autodetect_gopath = 1
    " for LSP
    let g:go_fmt_autosave = 1
    " let g:go_fmt_autosave = 0
    let g:go_def_mapping_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
    let g:go_code_completion_enabled = 0
    let g:go_info_mode = ''
'''

# [[plugins]]
# repo = 'natebosch/vim-lsc'
# hook_add = '''
#     let g:lsc_server_commands = {'go': 'gopls'}
#
#     " Use all the defaults (recommended):
#     let g:lsc_auto_map = v:true
#
#     " Apply the defaults with a few overrides:
#     let g:lsc_auto_map = {'defaults': v:true, 'FindReferences': '<leader>r'}
#
#     " Setting a value to a blank string leaves that command unmapped:
#     let g:lsc_auto_map = {'defaults': v:true, 'FindImplementations': ''}
#
#     let g:lsc_auto_map = {
#         \ 'GoToDefinition': '<C-]>',
#         \ 'GoToDefinitionSplit': ['<C-W>]', '<C-W><C-]>'],
#         \ 'FindReferences': 'gr',
#         \ 'NextReference': '<C-n>',
#         \ 'PreviousReference': '<C-p>',
#         \ 'FindImplementations': 'gI',
#         \ 'FindCodeActions': 'ga',
#         \ 'Rename': 'gR',
#         \ 'ShowHover': v:true,
#         \ 'DocumentSymbol': 'go',
#         \ 'WorkspaceSymbol': 'gS',
#         \ 'SignatureHelp': 'gm',
#         \ 'Completion': 'completefunc',
#         \}
#
#     nnoremap <c-t> <c-o>
#     let g:lsc_reference_highlights = v:false
#     set shortmess-=F
# '''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = 'coc#util#install()'
hook_add = '''

    " Tab補完
    function! s:completion_check_bs()
        let l:col = col('.') - 1
        return !l:col || getline('.')[l:col - 1] =~? '\s'
    endfunction
    
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>completion_check_bs() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    
    " inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)
    
    nmap <c-]> <Plug>(coc-definition)
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <c-t> <c-o>
    autocmd CursorHold * silent call CocActionAsync('highlight')
    
    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)
    
    " Remap for format selected region
    vmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)
    
    " " Using CocList
    " " Show all diagnostics
    " nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    "
    " " Manage extensions
    " nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    "
    " " Show commands
    " nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    "
    " " Find symbol of current document
    " nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    "
    " " Search workspace symbols
    " nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    "
    " " Do default action for next item.
    " nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    "
    " " Do default action for previous item.
    " nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    "
    " " Resume latest coc list
    " nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = 'bash install.sh'
#hook_add = '''
#    set hidden
#
#    let g:LanguageClient_serverCommands = {
#         \ 'go': ['gopls', '-logfile=auto'],
#         \ }
#
#    autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
#    let g:LanguageClient_autoStart = 1
#    let g:LanguageClient_loadSettings = 1
#
#    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#    nnoremap <C-]> :call LanguageClient#textDocument_definition()<CR>
#    nnoremap <C-T> <C-O>
#    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
#'''

#[[plugins]]
#repo = 'w0rp/ale'
#hook_add = '''
#  execute 'source' g:dein_plugin_dir . '/ale.rc.vim'
#'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2

    if !has('gui_running')
        set t_Co=256
    endif

    let g:lightline = {
         \ 'colorscheme': 'wombat',
         \ 'active': {
         \   'left': [ [ 'mode', 'paste' ],
         \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
         \ },
         \ 'component_function': {
         \   'gitbranch': 'fugitive#head'
         \ },
         \ }
'''

[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = 'go'
hook_add = '''
  nnoremap <leader>b :<C-u>DlvToggleBreakpoint<CR>
  nnoremap <leader>d :<C-u>DlvDebug<CR>
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let NERDTreeShowHidden = 1
    let g:NERDTreeShowIgnoredStatus = 1
    nnoremap <Space>n :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
    nmap <Space>c <Plug>(caw:hatpos:toggle)
    vmap <Space>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_char_list = ['|', '¦', '┆', '┊']
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
	nmap j <Plug>(accelerated_jk_gj)
	nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    execute 'source' g:dein_plugin_dir . '/iceberg.rc.vim'
'''

[[plugins]]
repo = 'chrisbra/vim-sh-indent'
on_ft = 'sh'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'uber/prototool'
rtp = 'vim/prototool'
on_ft = 'proto'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
